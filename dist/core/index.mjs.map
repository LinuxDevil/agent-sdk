{"version":3,"sources":["../../src/core/ConfigManager.ts","../../src/types/agent.ts","../../src/agent-types/validators.ts","../../src/core/AgentBuilder.ts"],"names":["AgentType"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * SDK Configuration\n */\nexport interface SDKConfig {\n  databaseIdHash: string;\n  storageKey?: string;\n  llm?: {\n    provider: 'openai' | 'ollama' | string;\n    apiKey?: string;\n    model?: string;\n    baseUrl?: string;\n  };\n  storage?: {\n    provider: string;\n    options?: Record<string, any>;\n  };\n  security?: {\n    encryption?: boolean;\n    encryptionKey?: string;\n  };\n}\n\n/**\n * Configuration manager for SDK\n */\nexport class ConfigManager {\n  private config: SDKConfig;\n\n  constructor(config: SDKConfig) {\n    this.validate(config);\n    this.config = config;\n  }\n\n  /**\n   * Get configuration\n   */\n  public getConfig(): SDKConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(updates: Partial<SDKConfig>): void {\n    this.config = { ...this.config, ...updates };\n    this.validate(this.config);\n  }\n\n  /**\n   * Get specific config value\n   */\n  public get<K extends keyof SDKConfig>(key: K): SDKConfig[K] {\n    return this.config[key];\n  }\n\n  /**\n   * Validate configuration\n   */\n  private validate(config: SDKConfig): void {\n    if (!config.databaseIdHash) {\n      throw new Error('databaseIdHash is required in SDK configuration');\n    }\n  }\n}\n","import { CoreMessage } from 'ai';\nimport { ToolConfiguration } from './tool';\nimport { AgentFlow } from './flow';\n\n/**\n * Agent type identifiers\n */\nexport enum AgentType {\n  SmartAssistant = 'smart-assistant',\n  SurveyAgent = 'survey-agent',\n  CommerceAgent = 'commerce-agent',\n  Flow = 'flow',\n}\n\n/**\n * Agent type descriptor\n */\nexport interface AgentTypeDescriptor {\n  type: AgentType;\n  description: Record<string, string>;\n  requiredTabs: string[];\n  supportsUserFacingUI: boolean;\n  displayName: Record<string, string>;\n}\n\n/**\n * Agent configuration\n */\nexport interface AgentConfig {\n  id?: string;\n  name: string;\n  agentType: AgentType;\n  locale?: string;\n  prompt?: string;\n  expectedResult?: any;\n  tools?: Record<string, ToolConfiguration>;\n  flows?: AgentFlow[];\n  events?: any[];\n  settings?: Record<string, any>;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Agent execution options\n */\nexport interface AgentExecutionOptions {\n  streaming?: boolean;\n  sessionId: string;\n  messages: CoreMessage[];\n  attachments?: any[];\n  locale?: string;\n  timezone?: string;\n  currentDateTime?: string;\n}\n\n/**\n * Agent execution result\n */\nexport interface AgentExecutionResult {\n  success: boolean;\n  result?: any;\n  error?: string;\n  sessionId: string;\n  tokensUsed?: number;\n  duration?: number;\n}\n\n/**\n * Agent definition for flows\n */\nexport interface AgentDefinition {\n  name: string;\n  id?: string;\n  model: string;\n  system: string;\n  tools: ToolSetting[];\n}\n\n/**\n * Tool setting in agent definition\n */\nexport interface ToolSetting {\n  name: string;\n  options: any;\n}\n","import { AgentConfig, AgentType } from '../types';\n\n/**\n * Validate agent configuration\n */\nexport function validateAgentConfig(config: Partial<AgentConfig>): { valid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (!config.name || config.name.trim() === '') {\n    errors.push('Agent name is required');\n  }\n\n  if (!config.agentType) {\n    errors.push('Agent type is required');\n  }\n\n  if (config.agentType && !Object.values(AgentType).includes(config.agentType)) {\n    errors.push(`Invalid agent type: ${config.agentType}`);\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Validate agent tools configuration\n */\nexport function validateAgentTools(tools: Record<string, any>): { valid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  for (const [key, config] of Object.entries(tools)) {\n    if (!config.tool) {\n      errors.push(`Tool configuration for '${key}' is missing 'tool' property`);\n    }\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n","import { AgentConfig, AgentType, ToolConfiguration, AgentFlow } from '../types';\nimport { validateAgentConfig, validateAgentTools } from '../agent-types';\nimport { nanoid } from 'nanoid';\n\n/**\n * Fluent API for building agents\n */\nexport class AgentBuilder {\n  private config: Partial<AgentConfig> = {};\n\n  /**\n   * Set agent type\n   */\n  public setType(type: AgentType): this {\n    this.config.agentType = type;\n    return this;\n  }\n\n  /**\n   * Set agent name\n   */\n  public setName(name: string): this {\n    this.config.name = name;\n    return this;\n  }\n\n  /**\n   * Set agent ID\n   */\n  public setId(id: string): this {\n    this.config.id = id;\n    return this;\n  }\n\n  /**\n   * Set system prompt\n   */\n  public setPrompt(prompt: string): this {\n    this.config.prompt = prompt;\n    return this;\n  }\n\n  /**\n   * Add a tool\n   */\n  public addTool(key: string, config: ToolConfiguration): this {\n    if (!this.config.tools) {\n      this.config.tools = {};\n    }\n    this.config.tools[key] = config;\n    return this;\n  }\n\n  /**\n   * Remove a tool\n   */\n  public removeTool(key: string): this {\n    if (this.config.tools) {\n      delete this.config.tools[key];\n    }\n    return this;\n  }\n\n  /**\n   * Set all tools\n   */\n  public setTools(tools: Record<string, ToolConfiguration>): this {\n    this.config.tools = tools;\n    return this;\n  }\n\n  /**\n   * Add a flow\n   */\n  public addFlow(flow: AgentFlow): this {\n    if (!this.config.flows) {\n      this.config.flows = [];\n    }\n    this.config.flows.push(flow);\n    return this;\n  }\n\n  /**\n   * Set all flows\n   */\n  public setFlows(flows: AgentFlow[]): this {\n    this.config.flows = flows;\n    return this;\n  }\n\n  /**\n   * Set expected result schema\n   */\n  public setExpectedResult(schema: any): this {\n    this.config.expectedResult = schema;\n    return this;\n  }\n\n  /**\n   * Set locale\n   */\n  public setLocale(locale: string): this {\n    this.config.locale = locale;\n    return this;\n  }\n\n  /**\n   * Set events\n   */\n  public setEvents(events: any[]): this {\n    this.config.events = events;\n    return this;\n  }\n\n  /**\n   * Set settings\n   */\n  public setSettings(settings: Record<string, any>): this {\n    this.config.settings = settings;\n    return this;\n  }\n\n  /**\n   * Set metadata\n   */\n  public setMetadata(metadata: Record<string, any>): this {\n    this.config.metadata = metadata;\n    return this;\n  }\n\n  /**\n   * Build the agent configuration\n   */\n  public build(): AgentConfig {\n    this.validate();\n    \n    return {\n      id: this.config.id || nanoid(),\n      name: this.config.name!,\n      agentType: this.config.agentType!,\n      locale: this.config.locale || 'en',\n      prompt: this.config.prompt,\n      expectedResult: this.config.expectedResult,\n      tools: this.config.tools || {},\n      flows: this.config.flows || [],\n      events: this.config.events || [],\n      settings: this.config.settings || {},\n      metadata: this.config.metadata || {},\n    };\n  }\n\n  /**\n   * Validate configuration before building\n   */\n  private validate(): void {\n    const validation = validateAgentConfig(this.config);\n    if (!validation.valid) {\n      throw new Error(`Agent configuration validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    if (this.config.tools) {\n      const toolsValidation = validateAgentTools(this.config.tools);\n      if (!toolsValidation.valid) {\n        throw new Error(`Agent tools validation failed: ${toolsValidation.errors.join(', ')}`);\n      }\n    }\n  }\n\n  /**\n   * Load from existing config\n   */\n  public static from(config: AgentConfig): AgentBuilder {\n    const builder = new AgentBuilder();\n    builder.config = { ...config };\n    return builder;\n  }\n\n  /**\n   * Create a new builder instance\n   */\n  public static create(): AgentBuilder {\n    return new AgentBuilder();\n  }\n}\n"]}