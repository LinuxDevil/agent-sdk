{"version":3,"sources":["../../src/tools/ToolRegistry.ts","../../src/tools/built-in/currentDate.ts","../../src/tools/built-in/dayName.ts","../../src/tools/built-in/http.ts","../../src/tools/built-in/email.ts"],"names":["tool","z"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ToolDescriptor } from '../types';\n\n/**\n * Tool Registry\n * Manages registration and retrieval of tools\n */\nexport class ToolRegistry {\n  private tools: Map<string, ToolDescriptor> = new Map();\n\n  /**\n   * Register a tool\n   */\n  public register(name: string, descriptor: ToolDescriptor): void {\n    if (this.tools.has(name)) {\n      console.warn(`Tool '${name}' is already registered. Overwriting.`);\n    }\n    this.tools.set(name, descriptor);\n  }\n\n  /**\n   * Register multiple tools at once\n   */\n  public registerMany(tools: Record<string, ToolDescriptor>): void {\n    Object.entries(tools).forEach(([name, descriptor]) => {\n      this.register(name, descriptor);\n    });\n  }\n\n  /**\n   * Get a tool by name\n   */\n  public get(name: string): ToolDescriptor | undefined {\n    return this.tools.get(name);\n  }\n\n  /**\n   * Check if a tool exists\n   */\n  public has(name: string): boolean {\n    return this.tools.has(name);\n  }\n\n  /**\n   * Get all tool names\n   */\n  public list(): string[] {\n    return Array.from(this.tools.keys());\n  }\n\n  /**\n   * Get all tools\n   */\n  public getAll(): Record<string, ToolDescriptor> {\n    const result: Record<string, ToolDescriptor> = {};\n    this.tools.forEach((descriptor, name) => {\n      result[name] = descriptor;\n    });\n    return result;\n  }\n\n  /**\n   * Remove a tool\n   */\n  public unregister(name: string): boolean {\n    return this.tools.delete(name);\n  }\n\n  /**\n   * Clear all tools\n   */\n  public clear(): void {\n    this.tools.clear();\n  }\n\n  /**\n   * Get the number of registered tools\n   */\n  public size(): number {\n    return this.tools.size;\n  }\n}\n\n/**\n * Global tool registry instance\n */\nexport const globalToolRegistry = new ToolRegistry();\n","import { z } from 'zod';\nimport { tool } from 'ai';\nimport { ToolDescriptor } from '../../types';\n\n/**\n * Current Date Tool\n * Returns the current date in ISO format\n */\nexport const currentDateTool: ToolDescriptor = {\n  displayName: 'Get current date',\n  tool: tool({\n    description: 'Get the current date and time in ISO format (UTC timezone)',\n    parameters: z.object({}),\n    execute: async () => {\n      return new Date().toISOString();\n    },\n  }),\n};\n","import { z } from 'zod';\nimport { tool } from 'ai';\nimport { ToolDescriptor } from '../../types';\n\n/**\n * Day Name Tool\n * Returns the name of the day for a given date\n */\nexport const dayNameTool: ToolDescriptor = {\n  displayName: 'Get day name',\n  tool: tool({\n    description: 'Get the name of the day (e.g., Monday, Tuesday) for a given date',\n    parameters: z.object({\n      date: z.string().describe('The date to get the day name for in ISO format (e.g., 2024-01-15)'),\n      locale: z.string().optional().describe('The locale to use for the day name (e.g., en-US, pl-PL). Defaults to en-US'),\n    }),\n    execute: async ({ date, locale = 'en-US' }) => {\n      return new Date(date).toLocaleDateString(locale, { weekday: 'long' });\n    },\n  }),\n};\n","import { z } from 'zod';\nimport { tool } from 'ai';\nimport { ToolDescriptor } from '../../types';\n\n/**\n * HTTP Tool Configuration Options\n */\nexport interface HttpToolOptions {\n  /**\n   * Maximum timeout for HTTP requests in milliseconds\n   * @default 30000 (30 seconds)\n   */\n  timeout?: number;\n\n  /**\n   * Maximum number of redirects to follow\n   * @default 5\n   */\n  maxRedirects?: number;\n\n  /**\n   * Whether to validate SSL certificates\n   * @default true\n   */\n  validateSSL?: boolean;\n}\n\n/**\n * Makes HTTP requests to external APIs\n */\nasync function makeHttpRequest({\n  url,\n  method,\n  headers,\n  body,\n  options = {},\n}: {\n  url: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: string;\n  options?: HttpToolOptions;\n}): Promise<string> {\n  try {\n    const fetchOptions: RequestInit = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: body && method !== 'GET' ? body : undefined,\n    };\n\n    const response = await fetch(url, fetchOptions);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const contentType = response.headers.get('content-type');\n    if (contentType?.includes('application/json')) {\n      const data = await response.json();\n      return JSON.stringify(data);\n    } else {\n      return await response.text();\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(`HTTP request failed: ${error.message}`);\n    }\n    throw new Error('HTTP request failed with unknown error');\n  }\n}\n\n/**\n * Create HTTP Tool\n * Factory function to create an HTTP tool with custom options\n */\nexport function createHttpTool(options: HttpToolOptions = {}): ToolDescriptor {\n  return {\n    displayName: 'Make HTTP request',\n    tool: tool({\n      description: 'Makes HTTP requests to specified URLs with configurable method, headers, and body. Supports GET, POST, PUT, DELETE, and PATCH methods.',\n      parameters: z.object({\n        url: z.string().describe('The URL to make the request to (must be a valid HTTP/HTTPS URL)'),\n        method: z.enum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']).describe('The HTTP method to use'),\n        headers: z.record(z.string()).optional().describe('Optional headers to include in the request as key-value pairs'),\n        body: z.string().optional().describe('The body of the request. For POST/PUT/PATCH, this should be a JSON string. Not used for GET/DELETE.'),\n      }),\n      execute: async ({ url, method, headers, body }) => {\n        return makeHttpRequest({ url, method, headers, body, options });\n      },\n    }),\n  };\n}\n\n/**\n * Default HTTP Tool instance\n */\nexport const httpTool: ToolDescriptor = createHttpTool();\n","import { z } from 'zod';\nimport { tool } from 'ai';\nimport { ToolDescriptor } from '../../types';\n\n/**\n * Email Tool Configuration Options\n */\nexport interface EmailToolOptions {\n  /**\n   * Email service provider API key\n   * Required for sending emails\n   */\n  apiKey: string;\n\n  /**\n   * Email service provider API URL\n   * @default 'https://api.resend.com/emails'\n   */\n  apiUrl?: string;\n\n  /**\n   * Default \"from\" email address\n   * Can be overridden per email\n   */\n  defaultFrom?: string;\n}\n\n/**\n * Send email using Resend API\n */\nasync function sendEmail({\n  from,\n  to,\n  subject,\n  text,\n  html,\n  apiKey,\n  apiUrl = 'https://api.resend.com/emails',\n}: {\n  from: string;\n  to: string[];\n  subject: string;\n  text: string;\n  html: string;\n  apiKey: string;\n  apiUrl?: string;\n}): Promise<string> {\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from,\n        to,\n        subject,\n        text,\n        html,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Email sending failed (${response.status}): ${errorData}`);\n    }\n\n    const data = await response.json();\n    return JSON.stringify(data);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(`Failed to send email: ${error.message}`);\n    }\n    throw new Error('Failed to send email with unknown error');\n  }\n}\n\n/**\n * Create Email Tool\n * Factory function to create an email tool with custom configuration\n */\nexport function createEmailTool(options: EmailToolOptions): ToolDescriptor {\n  const { apiKey, apiUrl, defaultFrom } = options;\n\n  if (!apiKey) {\n    throw new Error('Email tool requires an apiKey in options');\n  }\n\n  return {\n    displayName: 'Send email',\n    tool: tool({\n      description: 'Sends an email using the Resend.com API. Provide sender, recipients, subject, and content.',\n      parameters: z.object({\n        from: z.string().describe('The sender email address (e.g., \"Sender Name <sender@example.com>\"). Can use default if configured.').optional(),\n        to: z.array(z.string()).describe('Array of recipient email addresses (e.g., [\"user@example.com\"])'),\n        subject: z.string().describe('The subject line of the email'),\n        text: z.string().describe('Plain text content of the email'),\n        html: z.string().describe('HTML content of the email'),\n      }),\n      execute: async ({ from, to, subject, text, html }) => {\n        const senderEmail = from || defaultFrom;\n        \n        if (!senderEmail) {\n          throw new Error('Email \"from\" address is required. Provide it in the parameters or set defaultFrom in options.');\n        }\n\n        return sendEmail({\n          from: senderEmail,\n          to,\n          subject,\n          text,\n          html,\n          apiKey,\n          apiUrl,\n        });\n      },\n    }),\n  };\n}\n"]}