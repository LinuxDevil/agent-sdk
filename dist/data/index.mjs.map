{"version":3,"sources":["../../src/data/models.ts","../../src/data/mocks.ts"],"names":[],"mappings":";;;AAWO,IAAM,KAAA,GAAN,MAAM,MAAA,CAAM;AAAA,EACjB,EAAA;AAAA,EACA,IAAA;AAAA,EACA,SAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,cAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA,SAAA;AAAA,EAEA,YAAY,MAAA,EAAkE;AAC5E,IAAA,IAAA,CAAK,KAAK,MAAA,CAAO,EAAA;AACjB,IAAA,IAAA,CAAK,OAAO,MAAA,CAAO,IAAA;AACnB,IAAA,IAAA,CAAK,YAAY,MAAA,CAAO,SAAA;AACxB,IAAA,IAAA,CAAK,MAAA,GAAS,OAAO,MAAA,IAAU,IAAA;AAC/B,IAAA,IAAA,CAAK,SAAS,MAAA,CAAO,MAAA;AACrB,IAAA,IAAA,CAAK,iBAAiB,MAAA,CAAO,cAAA;AAC7B,IAAA,IAAA,CAAK,QAAQ,MAAA,CAAO,KAAA;AACpB,IAAA,IAAA,CAAK,QAAQ,MAAA,CAAO,KAAA;AACpB,IAAA,IAAA,CAAK,SAAS,MAAA,CAAO,MAAA;AACrB,IAAA,IAAA,CAAK,WAAW,MAAA,CAAO,QAAA;AACvB,IAAA,IAAA,CAAK,WAAW,MAAA,CAAO,QAAA;AACvB,IAAA,IAAA,CAAK,YAAY,MAAA,CAAO,SAAA;AACxB,IAAA,IAAA,CAAK,YAAY,MAAA,CAAO,SAAA;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,QAAA,GAAwB;AACtB,IAAA,OAAO;AAAA,MACL,IAAI,IAAA,CAAK,EAAA;AAAA,MACT,MAAM,IAAA,CAAK,IAAA;AAAA,MACX,WAAW,IAAA,CAAK,SAAA;AAAA,MAChB,QAAQ,IAAA,CAAK,MAAA;AAAA,MACb,QAAQ,IAAA,CAAK,MAAA;AAAA,MACb,gBAAgB,IAAA,CAAK,cAAA;AAAA,MACrB,OAAO,IAAA,CAAK,KAAA;AAAA,MACZ,OAAO,IAAA,CAAK,KAAA;AAAA,MACZ,QAAQ,IAAA,CAAK,MAAA;AAAA,MACb,UAAU,IAAA,CAAK,QAAA;AAAA,MACf,UAAU,IAAA,CAAK;AAAA,KACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAW,MAAA,EAA4B;AAC5C,IAAA,OAAO,IAAI,OAAM,MAAM,CAAA;AAAA,EACzB;AACF;AAKO,IAAM,UAAN,MAAc;AAAA,EACnB,EAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA,SAAA;AAAA,EAEA,YAAY,IAAA,EAOT;AACD,IAAA,IAAA,CAAK,KAAK,IAAA,CAAK,EAAA;AACf,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA;AACpB,IAAA,IAAA,CAAK,OAAO,IAAA,CAAK,IAAA;AACjB,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA;AACrB,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,IAAA,iBAAa,IAAI,IAAA,IAAO,WAAA,EAAY;AAC1D,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,IAAA,iBAAa,IAAI,IAAA,IAAO,WAAA,EAAY;AAAA,EAC5D;AACF;AAKO,IAAM,SAAN,MAAa;AAAA,EAClB,EAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,KAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EAEA,YAAY,IAAA,EAUT;AACD,IAAA,IAAA,CAAK,KAAK,IAAA,CAAK,EAAA;AACf,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA;AACtB,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA;AACpB,IAAA,IAAA,CAAK,SAAS,IAAA,CAAK,MAAA;AACnB,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA;AACpB,IAAA,IAAA,CAAK,QAAQ,IAAA,CAAK,KAAA;AAClB,IAAA,IAAA,CAAK,aAAa,IAAA,CAAK,UAAA;AACvB,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA;AACrB,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,IAAA,iBAAa,IAAI,IAAA,IAAO,WAAA,EAAY;AAAA,EAC5D;AACF;AAKO,IAAM,SAAN,MAAa;AAAA,EAClB,EAAA;AAAA,EACA,OAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EAEA,YAAY,IAAA,EAQT;AACD,IAAA,IAAA,CAAK,KAAK,IAAA,CAAK,EAAA;AACf,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA;AACpB,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA;AACtB,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA;AACpB,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA;AACtB,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA;AACrB,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,IAAA,iBAAa,IAAI,IAAA,IAAO,WAAA,EAAY;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAA,GAAqB;AACvB,IAAA,OAAO,IAAA,CAAK,UAAU,UAAA,IAAc,CAAA;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAA,GAAsB;AACxB,IAAA,OAAO,IAAA,CAAK,UAAU,WAAA,IAAe,CAAA;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAA,GAAiC;AACnC,IAAA,OAAO,KAAK,QAAA,EAAU,UAAA;AAAA,EACxB;AACF;AAKO,IAAM,aAAN,MAAiB;AAAA,EACtB,EAAA;AAAA,EACA,WAAA;AAAA,EACA,WAAA;AAAA,EACA,QAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA,SAAA;AAAA,EAEA,YAAY,IAAA,EAaT;AACD,IAAA,IAAA,CAAK,KAAK,IAAA,CAAK,EAAA;AACf,IAAA,IAAA,CAAK,cAAc,IAAA,CAAK,WAAA;AACxB,IAAA,IAAA,CAAK,cAAc,IAAA,CAAK,WAAA;AACxB,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA;AACrB,IAAA,IAAA,CAAK,OAAO,IAAA,CAAK,IAAA;AACjB,IAAA,IAAA,CAAK,OAAO,IAAA,CAAK,IAAA;AACjB,IAAA,IAAA,CAAK,aAAa,IAAA,CAAK,UAAA;AACvB,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA;AACrB,IAAA,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA;AACpB,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA;AACrB,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,IAAA,iBAAa,IAAI,IAAA,IAAO,WAAA,EAAY;AAC1D,IAAA,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,IAAA,iBAAa,IAAI,IAAA,IAAO,WAAA,EAAY;AAAA,EAC5D;AACF;ACjNA,IAAe,qBAAf,MAAgH;AAAA,EACpG,KAAA,uBAAyB,GAAA,EAAI;AAAA,EAEvC,MAAM,SAAS,EAAA,EAA4B;AACzC,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAE,CAAA,IAAK,IAAA;AAAA,EAC/B;AAAA,EAEA,MAAM,SAAS,MAAA,EAAmC;AAChD,IAAA,MAAM,QAAQ,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA;AAC5C,IAAA,IAAI,CAAC,QAAQ,OAAO,KAAA;AAEpB,IAAA,OAAO,KAAA,CAAM,OAAO,CAAA,IAAA,KAAQ;AAC1B,MAAA,OAAO,MAAA,CAAO,QAAQ,MAAM,CAAA,CAAE,MAAM,CAAC,CAAC,GAAA,EAAK,KAAK,CAAA,KAAM;AACpD,QAAA,OAAO,IAAA,CAAK,GAAc,CAAA,KAAM,KAAA;AAAA,MAClC,CAAC,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH;AAAA,EAEA,MAAM,OAAO,IAAA,EAAuB;AAClC,IAAA,MAAM,EAAA,GAAK,KAAK,UAAA,EAAW;AAC3B,IAAA,MAAM,GAAA,GAAA,iBAAM,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AACnC,IAAA,MAAM,IAAA,GAAO;AAAA,MACX,GAAG,IAAA;AAAA,MACH,EAAA;AAAA,MACA,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA,KACb;AACA,IAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAA,EAAW,IAAI,CAAA;AAC9B,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,MAAM,MAAA,CAAO,EAAA,EAAS,IAAA,EAA8B;AAClD,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAE,CAAA;AAClC,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,aAAA,EAAgB,EAAE,CAAA,UAAA,CAAY,CAAA;AAAA,IAChD;AAEA,IAAA,MAAM,OAAA,GAAU;AAAA,MACd,GAAG,QAAA;AAAA,MACH,GAAG,IAAA;AAAA,MACH,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,KACpC;AACA,IAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAA,EAAI,OAAO,CAAA;AAC1B,IAAA,OAAO,OAAA;AAAA,EACT;AAAA,EAEA,MAAM,OAAO,EAAA,EAA2B;AACtC,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,MAAA,CAAO,EAAE,CAAA;AAAA,EAC7B;AAAA,EAEA,MAAM,MAAM,MAAA,EAAsC;AAChD,IAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA;AACxC,IAAA,OAAO,KAAA,CAAM,MAAA;AAAA,EACf;AAAA,EAIA,KAAA,GAAc;AACZ,IAAA,IAAA,CAAK,MAAM,KAAA,EAAM;AAAA,EACnB;AACF,CAAA;AAKO,IAAM,mBAAA,GAAN,cACG,kBAAA,CAEV;AAAA,EACY,UAAA,GAAqB;AAC7B,IAAA,OAAO,MAAA,EAAO;AAAA,EAChB;AAAA,EAEA,MAAM,WAAW,IAAA,EAAgC;AAC/C,IAAA,OAAO,MAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MACrC,CAAA,KAAA,KAAS,MAAM,SAAA,KAAc;AAAA,KAC/B;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,IAAA,EAAqC;AACpD,IAAA,MAAM,QAAQ,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA;AAC5C,IAAA,OAAO,MAAM,IAAA,CAAK,CAAA,KAAA,KAAS,KAAA,CAAM,IAAA,KAAS,IAAI,CAAA,IAAK,IAAA;AAAA,EACrD;AAAA,EAEA,MAAM,OAAO,KAAA,EAAiC;AAC5C,IAAA,MAAM,UAAA,GAAa,MAAM,WAAA,EAAY;AACrC,IAAA,OAAO,MAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MAAO,CAAA,KAAA,KAC5C,KAAA,CAAM,IAAA,CAAK,WAAA,EAAY,CAAE,QAAA,CAAS,UAAU,CAAA,IAC5C,KAAA,CAAM,MAAA,EAAQ,WAAA,EAAY,CAAE,SAAS,UAAU;AAAA,KACjD;AAAA,EACF;AAAA,EAEA,MAAM,mBAAmB,OAAA,EAA6D;AACpF,IAAA,MAAM,EAAE,IAAA,GAAO,CAAA,EAAG,OAAA,GAAU,IAAG,GAAI,OAAA;AACnC,IAAA,MAAM,QAAQ,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA;AAC5C,IAAA,MAAM,QAAQ,KAAA,CAAM,MAAA;AACpB,IAAA,MAAM,KAAA,GAAA,CAAS,OAAO,CAAA,IAAK,OAAA;AAC3B,IAAA,MAAM,MAAM,KAAA,GAAQ,OAAA;AACpB,IAAA,MAAM,IAAA,GAAO,KAAA,CAAM,KAAA,CAAM,KAAA,EAAO,GAAG,CAAA;AAEnC,IAAA,OAAO;AAAA,MACL,IAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA,EAAY,IAAA,CAAK,IAAA,CAAK,KAAA,GAAQ,OAAO,CAAA;AAAA,MACrC,SAAS,GAAA,GAAM;AAAA,KACjB;AAAA,EACF;AACF;AAKO,IAAM,qBAAA,GAAN,cACG,kBAAA,CAEV;AAAA,EACY,UAAA,GAAqB;AAC7B,IAAA,OAAO,MAAA,EAAO;AAAA,EAChB;AAAA,EAEA,MAAM,cAAc,OAAA,EAAqC;AACvD,IAAA,OAAO,MAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MACrC,CAAA,OAAA,KAAW,QAAQ,OAAA,KAAY;AAAA,KACjC;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,SAAA,EAA4C;AACjE,IAAA,OAAO,IAAA,CAAK,SAAS,SAAS,CAAA;AAAA,EAChC;AAAA,EAEA,MAAM,UAAA,CAAW,SAAA,EAAmB,OAAA,EAAgC;AAClE,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,QAAA,CAAS,SAAS,CAAA;AAC7C,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,QAAA,EAAW,SAAS,CAAA,UAAA,CAAY,CAAA;AAAA,IAClD;AAEA,IAAA,MAAM,QAAA,GAAW,OAAA,CAAQ,QAAA,IAAY,EAAC;AACtC,IAAA,OAAO,IAAA,CAAK,OAAO,SAAA,EAAW;AAAA,MAC5B,QAAA,EAAU,CAAC,GAAG,QAAA,EAAU,OAAO;AAAA,KAChC,CAAA;AAAA,EACH;AAAA,EAEA,MAAM,UAAA,CAAW,SAAA,EAAmB,IAAA,EAA6C;AAC/E,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,QAAA,CAAS,SAAS,CAAA;AAC7C,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,QAAA,EAAW,SAAS,CAAA,UAAA,CAAY,CAAA;AAAA,IAClD;AAEA,IAAA,OAAO,IAAA,CAAK,OAAO,SAAA,EAAW;AAAA,MAC5B,MAAM,EAAE,GAAG,OAAA,CAAQ,IAAA,EAAM,GAAG,IAAA;AAAK,KAClC,CAAA;AAAA,EACH;AACF;AAKO,IAAM,oBAAA,GAAN,cACG,kBAAA,CAEV;AAAA,EACY,UAAA,GAAqB;AAC7B,IAAA,OAAO,MAAA,EAAO;AAAA,EAChB;AAAA,EAEA,MAAM,gBAAgB,SAAA,EAA2C;AAC/D,IAAA,MAAM,QAAQ,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA;AAC5C,IAAA,OAAO,MAAM,IAAA,CAAK,CAAA,MAAA,KAAU,MAAA,CAAO,SAAA,KAAc,SAAS,CAAA,IAAK,IAAA;AAAA,EACjE;AAAA,EAEA,MAAM,cAAc,OAAA,EAAoC;AACtD,IAAA,OAAO,MAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MACrC,CAAA,MAAA,KAAU,OAAO,OAAA,KAAY;AAAA,KAC/B;AAAA,EACF;AAAA,EAEA,MAAM,cAAA,GAAoC;AACxC,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA,CAAO,CAAA,MAAA,KAAU,MAAA,CAAO,OAAO,CAAA;AAAA,EACxE;AAAA,EAEA,MAAM,UAAA,GAAgC;AACpC,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA,CAAO,CAAA,MAAA,KAAU,CAAC,MAAA,CAAO,OAAO,CAAA;AAAA,EACzE;AACF;AAKO,IAAM,oBAAA,GAAN,cACG,kBAAA,CAEV;AAAA,EACY,UAAA,GAAqB;AAC7B,IAAA,OAAO,MAAA,EAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,IAAA,EAA4B;AACvC,IAAA,MAAM,EAAA,GAAK,KAAK,UAAA,EAAW;AAC3B,IAAA,MAAM,GAAA,GAAA,iBAAM,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AACnC,IAAA,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO;AAAA,MACxB,GAAG,IAAA;AAAA,MACH,EAAA;AAAA,MACA,SAAA,EAAW,KAAK,SAAA,IAAa;AAAA,KAC9B,CAAA;AACD,IAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAA,EAAI,MAAM,CAAA;AACzB,IAAA,OAAO,MAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAA,CAAO,EAAA,EAAY,IAAA,EAAwC;AAC/D,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAE,CAAA;AAClC,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,eAAA,EAAkB,EAAE,CAAA,UAAA,CAAY,CAAA;AAAA,IAClD;AAEA,IAAA,MAAM,OAAA,GAAU,IAAI,MAAA,CAAO;AAAA,MACzB,GAAG,QAAA;AAAA,MACH,GAAG,IAAA;AAAA,MACH,IAAI,QAAA,CAAS,EAAA;AAAA,MACb,OAAA,EAAS,IAAA,CAAK,OAAA,IAAW,QAAA,CAAS,OAAA;AAAA,MAClC,OAAA,EAAS,IAAA,CAAK,OAAA,IAAW,QAAA,CAAS,OAAA;AAAA,MAClC,WAAW,QAAA,CAAS;AAAA,KACrB,CAAA;AAED,IAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,EAAA,EAAI,OAAO,CAAA;AAC1B,IAAA,OAAO,OAAA;AAAA,EACT;AAAA,EAEA,MAAM,aAAA,CAAc,OAAA,EAAiB,KAAA,EAAmC;AACtE,IAAA,MAAM,WAAW,KAAA,CAAM,IAAA,CAAK,KAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MAC/C,CAAA,MAAA,KAAU,OAAO,OAAA,KAAY;AAAA,KAC/B;AACA,IAAA,OAAO,KAAA,GAAQ,QAAA,CAAS,KAAA,CAAM,CAAA,EAAG,KAAK,CAAA,GAAI,QAAA;AAAA,EAC5C;AAAA,EAEA,MAAM,gBAAgB,SAAA,EAAsC;AAC1D,IAAA,OAAO,MAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MACrC,CAAA,MAAA,KAAU,OAAO,SAAA,KAAc;AAAA,KACjC;AAAA,EACF;AAAA,EAEA,MAAM,MAAA,CAAO,OAAA,EAAiB,KAAA,EAAe,QAAQ,EAAA,EAAuB;AAC1E,IAAA,MAAM,UAAA,GAAa,MAAM,WAAA,EAAY;AACrC,IAAA,MAAM,WAAW,KAAA,CAAM,IAAA,CAAK,KAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,MAC/C,CAAA,MAAA,KACE,OAAO,OAAA,KAAY,OAAA,IACnB,OAAO,OAAA,CAAQ,WAAA,EAAY,CAAE,QAAA,CAAS,UAAU;AAAA,KACpD;AACA,IAAA,OAAO,QAAA,CAAS,KAAA,CAAM,CAAA,EAAG,KAAK,CAAA;AAAA,EAChC;AAAA,EAEA,MAAM,iBAAA,CACJ,OAAA,EACA,SAAA,EACA,QAAQ,EAAA,EACW;AAEnB,IAAA,MAAM,WAAW,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA,CAC5C,MAAA,CAAO,CAAA,MAAA,KAAU,OAAO,OAAA,KAAY,OAAA,IAAW,OAAO,SAAS,CAAA,CAC/D,IAAI,CAAA,MAAA,MAAW;AAAA,MACd,MAAA;AAAA,MACA,UAAA,EAAY,IAAA,CAAK,gBAAA,CAAiB,SAAA,EAAW,OAAO,SAAU;AAAA,MAC9D,CAAA,CACD,IAAA,CAAK,CAAC,CAAA,EAAG,CAAA,KAAM,EAAE,UAAA,GAAa,CAAA,CAAE,UAAU,CAAA,CAC1C,MAAM,CAAA,EAAG,KAAK,EACd,GAAA,CAAI,CAAA,IAAA,KAAQ,KAAK,MAAM,CAAA;AAE1B,IAAA,OAAO,QAAA;AAAA,EACT;AAAA,EAEQ,gBAAA,CAAiB,GAAa,CAAA,EAAqB;AACzD,IAAA,MAAM,UAAA,GAAa,CAAA,CAAE,MAAA,CAAO,CAAC,GAAA,EAAK,GAAA,EAAK,CAAA,KAAM,GAAA,GAAM,GAAA,GAAM,CAAA,CAAE,CAAC,CAAA,EAAG,CAAC,CAAA;AAChE,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,IAAA,CAAK,CAAA,CAAE,MAAA,CAAO,CAAC,GAAA,EAAK,GAAA,KAAQ,GAAA,GAAM,GAAA,GAAM,GAAA,EAAK,CAAC,CAAC,CAAA;AACjE,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,IAAA,CAAK,CAAA,CAAE,MAAA,CAAO,CAAC,GAAA,EAAK,GAAA,KAAQ,GAAA,GAAM,GAAA,GAAM,GAAA,EAAK,CAAC,CAAC,CAAA;AACjE,IAAA,OAAO,cAAc,IAAA,GAAO,IAAA,CAAA;AAAA,EAC9B;AACF;AAKO,IAAM,wBAAA,GAAN,cACG,kBAAA,CAEV;AAAA,EACU,MAAA,GAAS,CAAA;AAAA,EAEP,UAAA,GAAqB;AAC7B,IAAA,OAAO,IAAA,CAAK,MAAA,EAAA;AAAA,EACd;AAAA,EAEA,MAAM,iBAAiB,UAAA,EAAgD;AACrE,IAAA,MAAM,QAAQ,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA;AAC5C,IAAA,OAAO,MAAM,IAAA,CAAK,CAAA,GAAA,KAAO,GAAA,CAAI,UAAA,KAAe,UAAU,CAAA,IAAK,IAAA;AAAA,EAC7D;AAAA,EAEA,MAAM,WAAW,IAAA,EAAqC;AACpD,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,CAAE,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,IAAA,KAAS,IAAI,CAAA;AAAA,EACxE;AAAA,EAEA,MAAM,gBAAgB,EAAA,EAAwC;AAC5D,IAAA,OAAO,IAAA,CAAK,SAAS,EAAE,CAAA;AAAA,EACzB;AACF","file":"index.mjs","sourcesContent":["/**\n * Domain Models\n * Pure TypeScript classes representing business entities\n * Framework-agnostic and database-agnostic\n */\n\nimport { AgentConfig, AgentFlow } from '../types';\n\n/**\n * Agent Domain Model\n */\nexport class Agent {\n  id?: string;\n  name: string;\n  agentType: string;\n  locale: string;\n  prompt?: string;\n  expectedResult?: any;\n  tools?: Record<string, any>;\n  flows?: AgentFlow[];\n  events?: any[];\n  settings?: Record<string, any>;\n  metadata?: Record<string, any>;\n  createdAt?: string;\n  updatedAt?: string;\n\n  constructor(config: AgentConfig & { createdAt?: string; updatedAt?: string }) {\n    this.id = config.id;\n    this.name = config.name;\n    this.agentType = config.agentType;\n    this.locale = config.locale || 'en';\n    this.prompt = config.prompt;\n    this.expectedResult = config.expectedResult;\n    this.tools = config.tools;\n    this.flows = config.flows;\n    this.events = config.events;\n    this.settings = config.settings;\n    this.metadata = config.metadata;\n    this.createdAt = config.createdAt;\n    this.updatedAt = config.updatedAt;\n  }\n\n  /**\n   * Convert to AgentConfig for SDK usage\n   */\n  toConfig(): AgentConfig {\n    return {\n      id: this.id,\n      name: this.name,\n      agentType: this.agentType as any,\n      locale: this.locale,\n      prompt: this.prompt,\n      expectedResult: this.expectedResult,\n      tools: this.tools,\n      flows: this.flows,\n      events: this.events,\n      settings: this.settings,\n      metadata: this.metadata,\n    };\n  }\n\n  /**\n   * Create from AgentConfig\n   */\n  static fromConfig(config: AgentConfig): Agent {\n    return new Agent(config);\n  }\n}\n\n/**\n * Session Domain Model\n */\nexport class Session {\n  id: string;\n  agentId: string;\n  data?: Record<string, any>;\n  messages?: any[];\n  createdAt: string;\n  updatedAt: string;\n\n  constructor(data: {\n    id: string;\n    agentId: string;\n    data?: Record<string, any>;\n    messages?: any[];\n    createdAt?: string;\n    updatedAt?: string;\n  }) {\n    this.id = data.id;\n    this.agentId = data.agentId;\n    this.data = data.data;\n    this.messages = data.messages;\n    this.createdAt = data.createdAt || new Date().toISOString();\n    this.updatedAt = data.updatedAt || new Date().toISOString();\n  }\n}\n\n/**\n * Result Domain Model\n */\nexport class Result {\n  id?: string;\n  sessionId: string;\n  agentId: string;\n  result: any;\n  success: boolean;\n  error?: string;\n  tokensUsed?: number;\n  duration?: number;\n  createdAt: string;\n\n  constructor(data: {\n    id?: string;\n    sessionId: string;\n    agentId: string;\n    result: any;\n    success: boolean;\n    error?: string;\n    tokensUsed?: number;\n    duration?: number;\n    createdAt?: string;\n  }) {\n    this.id = data.id;\n    this.sessionId = data.sessionId;\n    this.agentId = data.agentId;\n    this.result = data.result;\n    this.success = data.success;\n    this.error = data.error;\n    this.tokensUsed = data.tokensUsed;\n    this.duration = data.duration;\n    this.createdAt = data.createdAt || new Date().toISOString();\n  }\n}\n\n/**\n * Memory Domain Model\n */\nexport class Memory {\n  id?: string;\n  agentId: string;\n  sessionId?: string;\n  content: string;\n  embedding?: number[];\n  metadata?: Record<string, any>;\n  createdAt: string;\n\n  constructor(data: {\n    id?: string;\n    agentId: string;\n    sessionId?: string;\n    content: string;\n    embedding?: number[];\n    metadata?: Record<string, any>;\n    createdAt?: string;\n  }) {\n    this.id = data.id;\n    this.agentId = data.agentId;\n    this.sessionId = data.sessionId;\n    this.content = data.content;\n    this.embedding = data.embedding;\n    this.metadata = data.metadata;\n    this.createdAt = data.createdAt || new Date().toISOString();\n  }\n\n  /**\n   * Convenience getter for importance (from metadata)\n   */\n  get importance(): number {\n    return this.metadata?.importance ?? 1;\n  }\n\n  /**\n   * Convenience getter for access count (from metadata)\n   */\n  get accessCount(): number {\n    return this.metadata?.accessCount ?? 0;\n  }\n\n  /**\n   * Convenience getter for accessed at (from metadata)\n   */\n  get accessedAt(): string | undefined {\n    return this.metadata?.accessedAt;\n  }\n}\n\n/**\n * Attachment Domain Model\n */\nexport class Attachment {\n  id?: number;\n  displayName: string;\n  description?: string;\n  mimeType?: string;\n  type?: string;\n  size: number;\n  storageKey: string;\n  filePath?: string;\n  content?: string;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n\n  constructor(data: {\n    id?: number;\n    displayName: string;\n    description?: string;\n    mimeType?: string;\n    type?: string;\n    size: number;\n    storageKey: string;\n    filePath?: string;\n    content?: string;\n    metadata?: Record<string, any>;\n    createdAt?: string;\n    updatedAt?: string;\n  }) {\n    this.id = data.id;\n    this.displayName = data.displayName;\n    this.description = data.description;\n    this.mimeType = data.mimeType;\n    this.type = data.type;\n    this.size = data.size;\n    this.storageKey = data.storageKey;\n    this.filePath = data.filePath;\n    this.content = data.content;\n    this.metadata = data.metadata;\n    this.createdAt = data.createdAt || new Date().toISOString();\n    this.updatedAt = data.updatedAt || new Date().toISOString();\n  }\n}\n","/**\n * Mock Repository Implementations\n * In-memory implementations for testing and development\n */\n\nimport {\n  AgentRepository,\n  SessionRepository,\n  ResultRepository,\n  MemoryRepository,\n  AttachmentRepository,\n  PaginationOptions,\n  PaginatedResult,\n} from './repositories';\nimport { Agent, Session, Result, Memory, Attachment } from './models';\nimport { nanoid } from 'nanoid';\n\n/**\n * Base Mock Repository\n * Provides in-memory storage for testing\n */\nabstract class BaseMockRepository<T extends { id?: any; createdAt?: string; updatedAt?: string }, TId = string> {\n  protected items: Map<TId, T> = new Map();\n\n  async findById(id: TId): Promise<T | null> {\n    return this.items.get(id) || null;\n  }\n\n  async findMany(filter?: Partial<T>): Promise<T[]> {\n    const items = Array.from(this.items.values());\n    if (!filter) return items;\n\n    return items.filter(item => {\n      return Object.entries(filter).every(([key, value]) => {\n        return item[key as keyof T] === value;\n      });\n    });\n  }\n\n  async create(data: any): Promise<T> {\n    const id = this.generateId();\n    const now = new Date().toISOString();\n    const item = {\n      ...data,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    } as T;\n    this.items.set(id as TId, item);\n    return item;\n  }\n\n  async update(id: TId, data: Partial<T>): Promise<T> {\n    const existing = this.items.get(id);\n    if (!existing) {\n      throw new Error(`Item with id ${id} not found`);\n    }\n\n    const updated = {\n      ...existing,\n      ...data,\n      updatedAt: new Date().toISOString(),\n    } as T;\n    this.items.set(id, updated);\n    return updated;\n  }\n\n  async delete(id: TId): Promise<boolean> {\n    return this.items.delete(id);\n  }\n\n  async count(filter?: Partial<T>): Promise<number> {\n    const items = await this.findMany(filter);\n    return items.length;\n  }\n\n  protected abstract generateId(): TId;\n\n  clear(): void {\n    this.items.clear();\n  }\n}\n\n/**\n * Mock Agent Repository\n */\nexport class MockAgentRepository\n  extends BaseMockRepository<Agent, string>\n  implements AgentRepository\n{\n  protected generateId(): string {\n    return nanoid();\n  }\n\n  async findByType(type: string): Promise<Agent[]> {\n    return Array.from(this.items.values()).filter(\n      agent => agent.agentType === type\n    );\n  }\n\n  async findByName(name: string): Promise<Agent | null> {\n    const items = Array.from(this.items.values());\n    return items.find(agent => agent.name === name) || null;\n  }\n\n  async search(query: string): Promise<Agent[]> {\n    const lowerQuery = query.toLowerCase();\n    return Array.from(this.items.values()).filter(agent =>\n      agent.name.toLowerCase().includes(lowerQuery) ||\n      agent.prompt?.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  async findWithPagination(options: PaginationOptions): Promise<PaginatedResult<Agent>> {\n    const { page = 1, perPage = 10 } = options;\n    const items = Array.from(this.items.values());\n    const total = items.length;\n    const start = (page - 1) * perPage;\n    const end = start + perPage;\n    const data = items.slice(start, end);\n\n    return {\n      data,\n      total,\n      page,\n      perPage,\n      totalPages: Math.ceil(total / perPage),\n      hasMore: end < total,\n    };\n  }\n}\n\n/**\n * Mock Session Repository\n */\nexport class MockSessionRepository\n  extends BaseMockRepository<Session, string>\n  implements SessionRepository\n{\n  protected generateId(): string {\n    return nanoid();\n  }\n\n  async findByAgentId(agentId: string): Promise<Session[]> {\n    return Array.from(this.items.values()).filter(\n      session => session.agentId === agentId\n    );\n  }\n\n  async findWithMessages(sessionId: string): Promise<Session | null> {\n    return this.findById(sessionId);\n  }\n\n  async addMessage(sessionId: string, message: any): Promise<Session> {\n    const session = await this.findById(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n\n    const messages = session.messages || [];\n    return this.update(sessionId, {\n      messages: [...messages, message],\n    });\n  }\n\n  async updateData(sessionId: string, data: Record<string, any>): Promise<Session> {\n    const session = await this.findById(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n\n    return this.update(sessionId, {\n      data: { ...session.data, ...data },\n    });\n  }\n}\n\n/**\n * Mock Result Repository\n */\nexport class MockResultRepository\n  extends BaseMockRepository<Result, string>\n  implements ResultRepository\n{\n  protected generateId(): string {\n    return nanoid();\n  }\n\n  async findBySessionId(sessionId: string): Promise<Result | null> {\n    const items = Array.from(this.items.values());\n    return items.find(result => result.sessionId === sessionId) || null;\n  }\n\n  async findByAgentId(agentId: string): Promise<Result[]> {\n    return Array.from(this.items.values()).filter(\n      result => result.agentId === agentId\n    );\n  }\n\n  async findSuccessful(): Promise<Result[]> {\n    return Array.from(this.items.values()).filter(result => result.success);\n  }\n\n  async findFailed(): Promise<Result[]> {\n    return Array.from(this.items.values()).filter(result => !result.success);\n  }\n}\n\n/**\n * Mock Memory Repository\n */\nexport class MockMemoryRepository\n  extends BaseMockRepository<Memory, string>\n  implements MemoryRepository\n{\n  protected generateId(): string {\n    return nanoid();\n  }\n\n  /**\n   * Override create to return Memory class instances\n   */\n  async create(data: any): Promise<Memory> {\n    const id = this.generateId();\n    const now = new Date().toISOString();\n    const memory = new Memory({\n      ...data,\n      id,\n      createdAt: data.createdAt || now,\n    });\n    this.items.set(id, memory);\n    return memory;\n  }\n\n  /**\n   * Override update to maintain Memory class instances\n   */\n  async update(id: string, data: Partial<Memory>): Promise<Memory> {\n    const existing = this.items.get(id);\n    if (!existing) {\n      throw new Error(`Memory with id ${id} not found`);\n    }\n\n    const updated = new Memory({\n      ...existing,\n      ...data,\n      id: existing.id,\n      agentId: data.agentId || existing.agentId,\n      content: data.content || existing.content,\n      createdAt: existing.createdAt,\n    });\n    \n    this.items.set(id, updated);\n    return updated;\n  }\n\n  async findByAgentId(agentId: string, limit?: number): Promise<Memory[]> {\n    const memories = Array.from(this.items.values()).filter(\n      memory => memory.agentId === agentId\n    );\n    return limit ? memories.slice(0, limit) : memories;\n  }\n\n  async findBySessionId(sessionId: string): Promise<Memory[]> {\n    return Array.from(this.items.values()).filter(\n      memory => memory.sessionId === sessionId\n    );\n  }\n\n  async search(agentId: string, query: string, limit = 10): Promise<Memory[]> {\n    const lowerQuery = query.toLowerCase();\n    const memories = Array.from(this.items.values()).filter(\n      memory =>\n        memory.agentId === agentId &&\n        memory.content.toLowerCase().includes(lowerQuery)\n    );\n    return memories.slice(0, limit);\n  }\n\n  async searchByEmbedding(\n    agentId: string,\n    embedding: number[],\n    limit = 10\n  ): Promise<Memory[]> {\n    // Simple cosine similarity search\n    const memories = Array.from(this.items.values())\n      .filter(memory => memory.agentId === agentId && memory.embedding)\n      .map(memory => ({\n        memory,\n        similarity: this.cosineSimilarity(embedding, memory.embedding!),\n      }))\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, limit)\n      .map(item => item.memory);\n\n    return memories;\n  }\n\n  private cosineSimilarity(a: number[], b: number[]): number {\n    const dotProduct = a.reduce((sum, val, i) => sum + val * b[i], 0);\n    const magA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));\n    const magB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));\n    return dotProduct / (magA * magB);\n  }\n}\n\n/**\n * Mock Attachment Repository\n */\nexport class MockAttachmentRepository\n  extends BaseMockRepository<Attachment, number>\n  implements AttachmentRepository\n{\n  private nextId = 1;\n\n  protected generateId(): number {\n    return this.nextId++;\n  }\n\n  async findByStorageKey(storageKey: string): Promise<Attachment | null> {\n    const items = Array.from(this.items.values());\n    return items.find(att => att.storageKey === storageKey) || null;\n  }\n\n  async findByType(type: string): Promise<Attachment[]> {\n    return Array.from(this.items.values()).filter(att => att.type === type);\n  }\n\n  async findWithContent(id: number): Promise<Attachment | null> {\n    return this.findById(id);\n  }\n}\n"]}