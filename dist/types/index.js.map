{"version":3,"sources":["../../src/types/common.ts","../../src/types/agent.ts","../../src/types/flow.ts"],"names":["DataLoadingStatus","AgentType","FlowChunkType"],"mappings":";;;AAIO,IAAK,iBAAA,qBAAAA,kBAAAA,KAAL;AACL,EAAAA,mBAAA,MAAA,CAAA,GAAO,MAAA;AACP,EAAAA,mBAAA,SAAA,CAAA,GAAU,SAAA;AACV,EAAAA,mBAAA,SAAA,CAAA,GAAU,SAAA;AACV,EAAAA,mBAAA,OAAA,CAAA,GAAQ,OAAA;AAJE,EAAA,OAAAA,kBAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA;;;ACGL,IAAK,SAAA,qBAAAC,UAAAA,KAAL;AACL,EAAAA,WAAA,gBAAA,CAAA,GAAiB,iBAAA;AACjB,EAAAA,WAAA,aAAA,CAAA,GAAc,cAAA;AACd,EAAAA,WAAA,eAAA,CAAA,GAAgB,gBAAA;AAChB,EAAAA,WAAA,MAAA,CAAA,GAAO,MAAA;AAJG,EAAA,OAAAA,UAAAA;AAAA,CAAA,EAAA,SAAA,IAAA,EAAA;;;ACJL,IAAK,aAAA,qBAAAC,cAAAA,KAAL;AACL,EAAAA,eAAA,WAAA,CAAA,GAAY,WAAA;AACZ,EAAAA,eAAA,eAAA,CAAA,GAAgB,eAAA;AAChB,EAAAA,eAAA,YAAA,CAAA,GAAa,YAAA;AACb,EAAAA,eAAA,YAAA,CAAA,GAAa,YAAA;AACb,EAAAA,eAAA,eAAA,CAAA,GAAgB,eAAA;AAChB,EAAAA,eAAA,WAAA,CAAA,GAAY,WAAA;AACZ,EAAAA,eAAA,YAAA,CAAA,GAAa,YAAA;AACb,EAAAA,eAAA,aAAA,CAAA,GAAc,aAAA;AACd,EAAAA,eAAA,OAAA,CAAA,GAAQ,OAAA;AACR,EAAAA,eAAA,SAAA,CAAA,GAAU,SAAA;AACV,EAAAA,eAAA,aAAA,CAAA,GAAc,aAAA;AAXJ,EAAA,OAAAA,cAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA","file":"index.js","sourcesContent":["/**\n * Common types used throughout the SDK\n */\n\nexport enum DataLoadingStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Success = 'success',\n  Error = 'error',\n}\n\nexport interface PaginationParams {\n  page?: number;\n  perPage?: number;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  perPage: number;\n  hasMore: boolean;\n}\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport interface Timestamped {\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface IdEntity {\n  id?: string | number;\n}\n","import { CoreMessage } from 'ai';\nimport { ToolConfiguration } from './tool';\nimport { AgentFlow } from './flow';\n\n/**\n * Agent type identifiers\n */\nexport enum AgentType {\n  SmartAssistant = 'smart-assistant',\n  SurveyAgent = 'survey-agent',\n  CommerceAgent = 'commerce-agent',\n  Flow = 'flow',\n}\n\n/**\n * Agent type descriptor\n */\nexport interface AgentTypeDescriptor {\n  type: AgentType;\n  description: Record<string, string>;\n  requiredTabs: string[];\n  supportsUserFacingUI: boolean;\n  displayName: Record<string, string>;\n}\n\n/**\n * Agent configuration\n */\nexport interface AgentConfig {\n  id?: string;\n  name: string;\n  agentType: AgentType;\n  locale?: string;\n  prompt?: string;\n  expectedResult?: any;\n  tools?: Record<string, ToolConfiguration>;\n  flows?: AgentFlow[];\n  events?: any[];\n  settings?: Record<string, any>;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Agent execution options\n */\nexport interface AgentExecutionOptions {\n  streaming?: boolean;\n  sessionId: string;\n  messages: CoreMessage[];\n  attachments?: any[];\n  locale?: string;\n  timezone?: string;\n  currentDateTime?: string;\n}\n\n/**\n * Agent execution result\n */\nexport interface AgentExecutionResult {\n  success: boolean;\n  result?: any;\n  error?: string;\n  sessionId: string;\n  tokensUsed?: number;\n  duration?: number;\n}\n\n/**\n * Agent definition for flows\n */\nexport interface AgentDefinition {\n  name: string;\n  id?: string;\n  model: string;\n  system: string;\n  tools: ToolSetting[];\n}\n\n/**\n * Tool setting in agent definition\n */\nexport interface ToolSetting {\n  name: string;\n  options: any;\n}\n","/**\n * Flow chunk event types\n */\nexport enum FlowChunkType {\n  FlowStart = 'flowStart',\n  FlowStepStart = 'flowStepStart',\n  FlowFinish = 'flowFinish',\n  Generation = 'generation',\n  GenerationEnd = 'generationEnd',\n  ToolCalls = 'toolCalls',\n  TextStream = 'textStream',\n  FinalResult = 'finalResult',\n  Error = 'error',\n  Message = 'message',\n  UIComponent = 'uiComponent',\n}\n\n/**\n * Flow chunk event\n */\nexport interface FlowChunkEvent {\n  type: FlowChunkType;\n  flowNodeId?: string;\n  flowAgentId?: string;\n  duration?: number;\n  name?: string;\n  timestamp?: Date;\n  issues?: any[];\n  result?: string | string[];\n  message?: string;\n  input?: any;\n  toolResults?: Array<{\n    args?: any;\n    result?: string;\n  }>;\n  messages?: Array<{\n    role: string;\n    content: Array<{ type: string; text: string }>;\n    id?: string;\n  }>;\n  component?: string;\n  componentProps?: any;\n  replaceFlowNodeId?: string;\n  deleteFlowNodeId?: string;\n}\n\n/**\n * Flow input types\n */\nexport type FlowInputType =\n  | 'shortText'\n  | 'url'\n  | 'longText'\n  | 'number'\n  | 'json'\n  | 'fileBase64';\n\n/**\n * Flow input variable\n */\nexport interface FlowInputVariable {\n  name: string;\n  description?: string;\n  required: boolean;\n  type: FlowInputType;\n}\n\n/**\n * Tool setting for flows\n */\nexport interface FlowToolSetting {\n  name: string;\n  options: any;\n}\n\n/**\n * Agent definition for flows\n */\nexport interface FlowAgentDefinition {\n  name: string;\n  id?: string;\n  model: string;\n  system: string;\n  tools: FlowToolSetting[];\n}\n\n/**\n * Agent flow definition\n */\nexport interface AgentFlow {\n  id?: string;\n  code: string;\n  name: string;\n  description?: string;\n  inputs?: FlowInputVariable[];\n  flow?: EditorStep;\n  agents?: FlowAgentDefinition[];\n}\n\n/**\n * Flow execution mode\n */\nexport type FlowExecutionMode = 'sync' | 'async';\n\n/**\n * Flow output mode\n */\nexport type FlowOutputMode = 'stream' | 'buffer';\n\n/**\n * Editor step types\n */\nexport type EditorStep =\n  | StepNode\n  | SequenceNode\n  | ParallelNode\n  | OneOfNode\n  | ForEachNode\n  | EvaluatorNode\n  | BestOfAllNode\n  | ToolNode\n  | UIComponentNode\n  | ConditionNode\n  | LoopNode;\n\nexport interface StepNode {\n  type: 'step';\n  agent: string;\n  input: string;\n}\n\nexport interface SequenceNode {\n  type: 'sequence';\n  steps: EditorStep[];\n}\n\nexport interface ParallelNode {\n  type: 'parallel';\n  steps: EditorStep[];\n}\n\nexport interface OneOfNode {\n  type: 'oneOf';\n  branches: {\n    when: string;\n    flow: EditorStep;\n  }[];\n}\n\nexport interface ForEachNode {\n  type: 'forEach';\n  item: string;\n  inputFlow: EditorStep;\n}\n\nexport interface EvaluatorNode {\n  type: 'evaluator';\n  criteria: string;\n  max_iterations?: number;\n  subFlow: EditorStep;\n}\n\nexport interface BestOfAllNode {\n  type: 'bestOfAll';\n  criteria: string;\n  steps: EditorStep[];\n}\n\nexport interface ToolNode {\n  type: 'tool';\n  toolName: string;\n  toolOptions: Record<string, any>;\n}\n\nexport interface UIComponentNode {\n  type: 'uiComponent';\n  componentName: string;\n  componentProps: Record<string, any>;\n}\n\nexport interface ConditionNode {\n  type: 'condition';\n  condition: string;\n  trueFlow: EditorStep;\n  falseFlow: EditorStep;\n}\n\nexport interface LoopNode {\n  type: 'loop';\n  maxIterations: number;\n  condition: string;\n  loopFlow: EditorStep;\n}\n"]}